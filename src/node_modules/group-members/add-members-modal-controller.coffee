_ = require('lodash')
Address = require('address-rfc2822')

### @ngInject ###
module.exports = ($scope, $modal, $modalInstance, $q, MembershipModel, MembershipsStore, group) ->

  $scope.group = group

  $scope.model = addresses: ""

  $scope.submit = (addMembersForm) ->
    $scope.submitted = true

    if addMembersForm.$invalid
      return

    # validate addresses
    addresses = Address.parse($scope.model.addresses)
    members = _.map addresses, (address) ->
      {
        name: address.name() || null
        email: address.address
      }

    unsavedMemberships = _.map members, (member) ->
      new MembershipModel({
        member: member
        groupId: $scope.group.id
      })

    $q.all(_.map unsavedMemberships, (unsaved) ->
      MembershipsStore.save(unsaved).then null, (err) ->
        # if error is an Error object pass along
        # to not upset $q.all
        if err instanceof Error
          err
        # if not an Error object, upset $q.all
        # and create an unhandled error
        else
          throw err
    )
    .then (membershipsOrErrors) ->
      ###
        log
        - existing members invited
        - new members invited
        - members errored
      ###
      ret =
        memberships: []
        createdMembers: []
        invitedMembers: []
        erroredMembers: []

      savedMemberships = []
      _.forEach membershipsOrErrors, (membershipOrError) ->
        if membershipOrError instanceof Error
          ret.erroredMembers.push(membershipOrError.member)
        else if not membershipOrError.member.initialized
          ret.createdMembers.push(membershipOrError.member)
          ret.memberships(membershipOrError)
        else
          ret.invitedMembers.push(membershipOrError.member)
          ret.memberships(membershipOrError)

      $modalInstance.close(ret)
    , (err) ->
      $modalInstance.dismiss(err)

  $scope.cancel = ->
    $modalInstance.dismiss(null)
