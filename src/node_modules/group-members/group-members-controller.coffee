_ = require('lodash')
debug = require('debug')("group-members")

### @ngInject ###
module.exports = ($scope, $modal, AuthService, group, memberships, MembershipModel, MembershipsStore) ->

  $scope.isAdmin = group.isAdmin(AuthService.getCurrentUser())

  # alerts
  $scope.alerts = []

  $scope.addAlert = (alert) ->
    $scope.alerts.push(alert)

  $scope.closeAlert = (index) ->
    $scope.alerts.splice(index, 1)
  # /alerts

  $scope.openAddMembersModal = ->
    $modal.open(
      require('./add-members-modal.coffee')(
        group: group
      )
    ).result.then (modalRet) ->
      debug("new members modal return", modalRet)

      _.forEach modalRet.memberships, (membership) ->
        membershipIndex = _.sortedIndex memberships, membership, (m) -> m.member.name
        memberships.splice(membershipIndex, 0, membership)

      if modalRet.members.length > 0
        $scope.addAlert(
          type: "success"
          msg: "Successfully added new members:
            #{ (_.map modalRet.members, (m) -> m.name).join(", ") }"
        )

      if (modalRet.erroredMembers.length > 0)
        $scope.addAlert(
          type: "danger"
          msg: "Errored while adding #{ modalRet.erroredMembers.length } members:
            #{ (_.map modalRet.erroredMembers, (m) -> m.name).join(", ") }"
        )

    , (err) ->
      if (err)
        # handle error
        $modal.open(
          require('error-modal')({ error: err })
        )

  $scope.toggleAdmin = (membership, index) ->
    # toggle admin property
    membership.isAdmin = !membership.isAdmin
    # re-save
    MembershipsStore.save(membership).then null
    , (err) ->
      # re-toggle
      membership.isAdmin = !membership.isAdmin
      # handle error
      $modal.open(
        require('error-modal')({ error: err })
      )

  $scope.removeMember = (membership, index) ->
    MembershipsStore.remove(membership).then ->
      memberships.splice(index, 1)
