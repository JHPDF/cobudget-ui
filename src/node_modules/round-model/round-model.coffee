Decimal = require('big.js')
Moment = require('moment')

### @ngInject ###
module.exports = (AllocationModel, BucketModel, FixedCostModel) ->
  class RoundModel
    constructor: (data = {}) ->
      @id = data.id
      @name = data.name
      @groupId = data.groupId

      @startsAt = Moment(data.startsAt)
      @endsAt = Moment(data.endsAt)

      @allocations = _.map data.allocations, (allocation) ->
        new AllocationModel(allocation)
      @buckets = _.map data.buckets, (bucket) ->
        new BucketModel(bucket)
      @fixedCosts = _.map data.fixedCosts, (fixedCost) ->
        new FixedCostModel(fixedCost)

      Object.defineProperties @,
        status:
          get: ->
            now = Moment()
            if (@startsAt.isAfter(now))
              changeLabel = "starts"
              changeTime = @startsAt.from(now)
              return {
                name: "pending"
                class: "info"
                label: changeLabel + " " + changeTime
                changeLabel: changeLabel
                changeTime: changeTime
              }
            else if (@startsAt.isBefore(now) and @endsAt.isAfter(now))
              return {
                name: "open"
                class: "success"
                label: "open now, ends " + @endsAt.from(now)
                changeLabel: "time left"
                changeTime: @endsAt.from(now, true)
              }
            else
              changeLabel = "ended"
              changeTime = @endsAt.from(now)
              return {
                name: "closed"
                class: "warning"
                label: changeLabel + " " + changeTime
                changeLabel: changeLabel
                changeTime: changeTime
              }

    serialize: ->
      {
        id: @id
        name: @name
        groupId: @groupId
        startsAt: @startsAt.toISOString()
        endsAt: @endsAt.toISOString()
      }

    getMyContributions: ->
      @myContributions = _.map @buckets, (bucket) ->
        bucket.myContribution

    getMyAllocationsLeftCents: (myAllocationsCents) ->
      myContributionsCents = _.reduce _.pluck(@myContributions, "amountCents"), (sum, num) ->
        sum + num
      @myAllocationsLeftCents = myAllocationsCents - myContributionsCents


    getStatus: ->
      if (@myAllocationsLeftCents > 0)
        null
      else if (@myAllocationsLeftCents == 0)
        'complete'
      else
        'warning'

    getAllocationsByUser: ->
      # index allocations by user id
      allocationsByUserId = {}
      _.each @allocations, (allocation) ->
        allocationsByUserId[allocation.userId] = allocation
      allocationsByUserId

    getTotalAllocationsDollars: ->
      # index allocations by user id
      total = 0
      _.each @allocations, (allocation) ->
        total += allocation.amountCents
      
      total = total / 100

    getContributors: (memberships) ->
      contributors = {}

      allocationsByUserId = @getAllocationsByUser()

      # for each member
      _.each memberships, (membership) ->
        contributor = {
          user: membership.user
        }

        allocation = allocationsByUserId[contributor.user.id]

        if (allocation)
          contributor.allocationCents = allocation.amountCents

        contributor.allocation = contributor.allocationCents / 100

        contributors[contributor.user.id] = contributor

      # for each bucket
      _.each @buckets, (bucket) ->
        contributions = bucket.getContributionsByUser()

        # add contributions to contributors
        _.each contributions, (contribution, userId) ->

          contributor = contributors[userId]

          if not contributors or not contributor
            return

          if not contributor.contributionCents
            contributor.contributionCents = contribution.amountCents
          else
            contributor.contributionCents += contribution.amountCents

          contributor.contribution = contributor.contributionCents / 100

      contributors

    getFixedCostCents: ->
      @fixedCostCents =
        _.reduce(_.pluck(@fixedCosts, "amount"), (sum, num) ->
          sum.plus(num or new Decimal(0))
        , new Decimal(0))
        .times(100).toFixed(0)

