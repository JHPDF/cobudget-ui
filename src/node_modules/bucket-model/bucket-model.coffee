sum = require('utils/sum')

### @ngInject ###
module.exports = (BaseModel, BaseCollection, ContributionModel, UserModel, AuthService) ->

  BaseModel.extend
    
    type: "Bucket"

    props:
      name: "string"
      roundId: "number"
      description: "string"
      user: "object"
      target: "decimal"

    children:
      user: UserModel
      contributions: BaseCollection.extend
        model: ContributionModel

    derived:
      contributionTotal:
        deps: ['contributions.amount']
        fn: ->
          sum(@contributions.pluck("amount"))

      myContributionIndex:
        deps: ['contributions.user.id']
        fn: ->
          @contributions.findIndex (contribution) ->
            contribution.user.id == AuthService.getCurrentUser().id

      myContribution:
        deps: ['myContributionIndex', 'contributions']
        fn: ->
          index = @myContributionIndex
          if index != -1
            @contributions.at(index)
          else
            new ContributionModel({
              user: {
                id: AuthService.getCurrentUser().id
              }
              bucketId: @id
              amount: 0
            })

      groupContributions:
        deps: ['contributions.user.id']
        fn: ->
          @contributions.filter (contribution) ->
            contribution.user.id != AuthService.getCurrentUser.id

      percentageFunded:
        deps: ['contributionTotal', 'target']
        fn: ->
          @contributionTotal.div(@target)

      myContributionPercentage:
        deps: ['myContribution.amount', 'target']
        fn: ->
          @myContribution.amount.div(@target)

      groupContributionPercentage:
        deps: ['percentageFunded', 'myContributionPercentage']
        fn: ->
          @percentageFunded.minus(@myContributionPercentage)

      groupContribution:
        deps: ['contributionTotal', 'myContribution']
        fn: ->
          @contributionTotal.minus(@myContribution.amount)

    getContributionsByUser: () ->
      contributions = {}
      @contributions.forEach (contribution) ->
        contributions[contribution.user.id] = contribution
      contributions

    serialize: ->
      serialized = BaseModel.prototype.serialize.call(@)
      serialized.target = serialized.target.toFixed(2)
      serialized
