_ = require('lodash')
sum = require('compute-sum')

### @ngInject ###
module.exports = (ContributionModel, UserModel, AuthService) ->
  class BucketModel
    constructor: (data = {}) ->
      @id = data.id
      @name = data.name
      @roundId = data.roundId
      @description = data.description
      @user = new UserModel(data.user)
      @percentageFunded = data.percentageFunded
      @targetCents = data.targetCents
      @contributions = _.map data.contributions, (contribution) ->
        # attach bucketId to contribution, as the data
        # returned from the API does not have this
        contrib = _.extend(_.clone(contribution), bucketId: data.id)
        new ContributionModel(contrib)

      Object.defineProperties @,
        contributionTotalCents:
          get: ->
            sum(_.pluck @contributions, "amountCents")

        myContribution:
          get: ->
            currentUserId = AuthService.getCurrentUser.id
            (_.find @contributions, (contribution) ->
              contribution.user.id == currentUserId
            ) or new ContributionModel({
              userId: currentUserId
              bucketId: @id
              amountCents: 0
            })

        groupContributions:
          get: ->
            _.filter @contributions, (contribution) ->
              contribution.user.id != AuthService.getCurrentUser.id

        percentageFunded:
          get: ->
            (@contributionTotalCents / @targetCents) * 100

        myContributionPercentage:
          get: ->
            (@myContribution.amountCents / @targetCents) * 100

        groupContributionPercentage:
          get: ->
            @percentageFunded - @myContributionPercentage

        groupContributionCents:
          get: ->
            @contributionTotalCents - @myContribution.amountCents

    serialize: ->
      {
        name: @name
        description: @description
        userId: @user.id
        targetCents: @targetCents
        roundId: @roundId
      }

    getContributionsByUser: () ->
      contributions = {}
      _.each @contributions, (contribution) ->
        contributions[contribution.user.id] = contribution
      contributions
