### @ngInject ###
module.exports = (ContributionModel, UserModel, AuthService) ->
  class BucketModel
    constructor: (data = {}) ->
      @id = data.id
      @name = data.name
      @roundId = data.roundId
      @description = data.description
      @user = new UserModel(data.user)
      @percentageFunded = data.percentageFunded
      @contributionTotalCents = data.contributionTotalCents
      @targetCents = data.targetCents
      @contributions = _.map data.contributions, (contribution) ->
        # attach bucketId to contribution, as the data
        # returned from the API does not have this
        contrib = _.extend(_.clone(contribution), bucketId: data.id)
        new ContributionModel(contrib)

    serialize: ->
      {
        name: @name
        description: @description
        userId: @user.id
        targetCents: @targetCents
        roundId: @roundId
      }

    getMyContribution: (currentUserId) ->
      @myContribution = (_.find @contributions, (contribution) ->
        contribution.user.id == currentUserId
      ) or new ContributionModel({
        userId: currentUserId
        bucketId: @id
        amountCents: 0
      })

    getPercentageFunded: () ->
      @percentageFunded = (@contributionTotalCents / @targetCents) * 100

    getMyContributionPercentage: () ->
      @myContributionPercentage = (@myContribution.amountCents / @targetCents) * 100

    getGroupContribution: () ->
      @groupContributionPercentage = @percentageFunded - @myContributionPercentage
      @groupContributionCents = @contributionTotalCents - @myContribution.amountCents

    getContributionsByUser: () ->
      contributions = {}
      _.each @contributions, (contribution) ->
        contributions[contribution.user.id] = contribution
      contributions
