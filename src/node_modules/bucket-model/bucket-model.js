var _ = require('lodash');
var Decimal = require('decimal');

var sum = require('utils/sum');

/* @ngInject */
module.exports = function (BaseModel, BaseCollection, ContributionModel, UserModel, AuthService) {
  return BaseModel.extend({
    modelType: "Bucket",

    props: {
      name: "string",
      roundId: "number",
      description: "string",
      target: "decimal",
    },

    children: {
      user: UserModel,
      contributions: BaseCollection.extend({
        model: ContributionModel,
      }),
    },

    initialize: function () {
      // attach bucketId to contributions, as the data
      // returned from the API does not have this
      this.contributions.map(function (contribution) {
        contribution.bucketId = this.id;
      }, this);
    },

    derived: {
      contributionCount: {
        deps: ['contributions'],
        fn: function () {
          return _.filter(this.contributions, function (contribution) {
            return contribution.amount.gt(0);
          }).length;
        },
      },
      contributionTotal: {
        deps: ['contributions'],
        fn: function () {
          return sum(_.pluck(this.contributions, "amount"));
        },
      },
      myContributionIndex: {
        deps: ['contributions'],
        fn: function () {
          return _.findIndex(this.contributions, function (contribution) {
            return contribution.user.id === AuthService.getCurrentUser().id;
          });
        },
      },
      myContribution: {
        deps: ['myContributionIndex', 'contributions'],
        fn: function () {
          var index = this.myContributionIndex;
          if (index !== -1) {
            return this.contributions[index];
          } else {
            var currentUser = AuthService.getCurrentUser();
            return new ContributionModel({
              user: {
                id: currentUser.id,
                name: currentUser.name,
              },
              bucketId: this.id,
              amount: 0
            });
          }
        },
      },
      groupContributions: {
        deps: ['contributions'],
        fn: function () {
          return _.filter(contributions, function (contribution) {
            return contribution.user.id !== AuthService.getCurrentUser.id;
          });
        },
      },
      percentageFunded: {
        deps: ['contributionTotal', 'target'],
        fn: function () {
          if (!this.target.gt(0)) {
            return new Decimal(0);
          }
          return this.contributionTotal.div(this.target);
        },
      },
      myContributionPercentage: {
        deps: ['myContribution', 'target'],
        fn: function () {
          if (!this.target.gt(0)) {
            return new Decimal(0);
          }
          return myContribution.amount.div(this.target);
        },
      },
      groupContributionPercentage: {
        deps: ['percentageFunded', 'myContributionPercentage'],
        fn: function () {
          this.percentageFunded.minus(this.myContributionPercentage);
        },
      },
      groupContribution: {
        deps: ['contributionTotal', 'myContribution'],
        fn: function () {
          this.contributionTotal.minus(this.myContribution.amount);
        },
      },
    },

    serialize: function () {
      var srlzd = BaseModel.prototype.serialize.call(this);
      srlzd.userId = srlzd.user.id;
      delete srlzd.user;
      return srlzd;
    },

    getContributionsByUser: function () {
      var contributions = {};
      _.each(this.contributions, function (contribution) {
        contributions[contribution.user.id] = contribution;
      });
      return contributions;
    },
  });
};
