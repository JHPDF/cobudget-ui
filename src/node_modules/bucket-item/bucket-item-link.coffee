_ = require('lodash')
Decimal = require('big.js')

### @ngInject ###
module.exports = (scope, element, attrs) ->

  round = scope.round
  bucket = scope.bucket

  scope.model = {}
  Object.defineProperties scope.model,
    myContributionAmount:
      get: ->
        Number(scope.bucket.myContribution.amount.toFixed(2))
      set: (amount) ->
        scope.bucket.myContribution.amount = new Decimal(amount)
    myContributionPercentageMaxed:
      get: ->
        Math.min(
          Number(bucket.myContributionPercentage.times(100).toString()),
          Number(new Decimal(100).minus(bucket.groupContributionPercentage.times(100)).toString())
        )

  scope.$watch "model.myContributionAmount", (amount, oldAmount) ->

    # if amount is Not a Number (NaN)
    if amount != 0 and not amount
      # don't accept number
      amount = oldAmount

    # save amount to bucket contribution
    myContribution = bucket.myContribution
    myContribution.amount = new Decimal(amount)

    # if over contributed, cap at allocation
    if round.myAllocationLeft.lt(0)
      myContribution.amount = myContribution.amount.plus(round.myAllocationLeft)

    if bucket.myContributionIndex == -1
      bucket.contributions.push(myContribution)
