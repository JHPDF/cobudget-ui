_ = require('lodash')
Decimal = require('big.js')
debug = require('debug')("bucket-item")

### @ngInject ###
module.exports = ($timeout) ->
  (scope, element, attrs) ->

    round = scope.round
    bucket = scope.bucket

    scope.model = { }

    Object.defineProperties scope.model,
      myContributionAmount:
        get: ->
          Number(bucket.myContribution.amount.toFixed(2))
        set: (amount) ->
          # if amount is Not a Number (NaN)
          if amount != 0 and not amount
            # yeah nah
            return

          # if amount is negative
          if amount < 0
            # set to zero
            amount = 0

          # save amount to bucket contribution
          myContribution = bucket.myContribution
          myContribution.amount = new Decimal(amount)

          # if over contributed, cap at allocation
          if round.myAllocationLeft.lt(0)
            myContribution.amount = myContribution.amount.plus(round.myAllocationLeft)

          if not myContribution.amount.eq(0) and bucket.myContributionIndex == -1
            bucket.contributions.push(myContribution)

      myContributionPercentageMaxed:
        get: ->
          Math.min(
            Number(bucket.myContributionPercentage.times(100).toString()),
            Number(new Decimal(100).minus(bucket.groupContributionPercentage.times(100)).toString())
          )

      startContributing:
        value: ($event) ->
          debug("startContributing", $event)

          scope.model.initStatus = scope.model.inputStatus
          scope.model.initValue = scope.model.myContributionAmount

          scope.model.inputStatus = "unsaved"
          debug("unsaved")

          # focus onto input
          $timeout ->
            input = element.find('input[type="number"]')
            debug("focusing input", input)
            input.focus() if not input.is(':focus')

      saveContribution:
        value: (myContribution) ->
          debug("saveContribution", myContribution)

          # if contribution is empty and new, go back to ready
          if not myContribution.amount.gt(0) and not myContribution.id
            debug("ready")
            scope.model.inputStatus = "ready"
            return

          scope.model.inputStatus = "saving"
          debug("saving")

          scope.saveContribution(myContribution).then ->
            if myContribution.amount.eq(0)
              scope.model.inputStatus = "ready"
              debug("ready")
            else
              scope.model.inputStatus = "saved"
              debug("saved")
          , (err) ->
            scope.model.inputStatus = "error"
            debug("error", err)
            # TODO handle error

      cancelContribution:
        value: ->
          debug("cancelContribution")

          scope.model.inputStatus = scope.model.initStatus
          scope.model.myContributionAmount = scope.model.initValue

      handleKeyDown:
        value: ($event) ->
          debug("handleKeyPress", $event)

          # enter
          if $event.keyCode == 13
            scope.model.saveContribution(bucket.myContribution)
          # escape
          else if $event.keyCode == 27
            scope.model.cancelContribution()
          # backspace
          else if $event.keyCode == 8
            if scope.model.myContributionAmount.toString().length == 1
              scope.model.myContributionAmount = 0

    if bucket.myContribution.amount > 0
      scope.model.inputStatus = "saved"
    else if round.status.name != "open"
      scope.model.inputStatus = "done"
    else
      scope.model.inputStatus = "ready"
