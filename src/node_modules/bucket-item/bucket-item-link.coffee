_ = require('lodash')
Decimal = require('big.js')

### @ngInject ###
module.exports = (scope, element, attrs) ->

  round = scope.round
  bucket = scope.bucket

  scope.model = {
    contributing: false
  }
  Object.defineProperties scope.model,
    myContributionAmount:
      get: ->
        Number(bucket.myContribution.amount.toFixed(2))
      set: (amount) ->
        # if amount is Not a Number (NaN)
        if amount != 0 and not amount
          # yeah nah
          return

        # if amount is negative
        if amount < 0
          # set to zero
          amount = 0

        # save amount to bucket contribution
        myContribution = bucket.myContribution
        myContribution.amount = new Decimal(amount)

        # if over contributed, cap at allocation
        if round.myAllocationLeft.lt(0)
          myContribution.amount = myContribution.amount.plus(round.myAllocationLeft)

        if not myContribution.amount.eq(0) and bucket.myContributionIndex == -1
          bucket.contributions.push(myContribution)

    myContributionPercentageMaxed:
      get: ->
        Math.min(
          Number(bucket.myContributionPercentage.times(100).toString()),
          Number(new Decimal(100).minus(bucket.groupContributionPercentage.times(100)).toString())
        )

    readonly:
      get: ->
        roundStatus = round.status.name
        roundStatus == 'pending' or roundStatus == 'closed'

    startContributing:
      value: (ev) ->
        ev.preventDefault()
        console.log("started contributing")
        console.log(scope.model.contributing)
        scope.model.contributing = true

  scope.$watch "model.myContributionAmount", (amount, oldAmount) ->
    if amount != oldAmount
      element.find('input[type="number"]').focus()
