_ = require('lodash')
Decimal = require('big.js')

### @ngInject ###
module.exports = (scope, element, attrs) ->

  round = scope.round
  bucket = scope.bucket

  scope.model = { }

  Object.defineProperties scope.model,
    myContributionAmount:
      get: ->
        Number(bucket.myContribution.amount.toFixed(2))
      set: (amount) ->
        # if amount is Not a Number (NaN)
        if amount != 0 and not amount
          # yeah nah
          return

        # if amount is negative
        if amount < 0
          # set to zero
          amount = 0

        # save amount to bucket contribution
        myContribution = bucket.myContribution
        myContribution.amount = new Decimal(amount)

        # if over contributed, cap at allocation
        if round.myAllocationLeft.lt(0)
          myContribution.amount = myContribution.amount.plus(round.myAllocationLeft)

        if not myContribution.amount.eq(0) and bucket.myContributionIndex == -1
          bucket.contributions.push(myContribution)

    myContributionPercentageMaxed:
      get: ->
        Math.min(
          Number(bucket.myContributionPercentage.times(100).toString()),
          Number(new Decimal(100).minus(bucket.groupContributionPercentage.times(100)).toString())
        )

    readonly:
      get: ->
        roundStatus = round.status.name
        roundStatus == 'pending' or roundStatus == 'closed'

    startContributing:
      value: (ev) ->
        scope.model.inputStatus = "unsaved"
        # TODO hack
        window.setTimeout ->
          element.find('input[type="number"]').focus()

    saveContribution:
      value: (myContribution) ->
        # if contribution is empty and new, go back to ready
        if not myContribution.amount.gt(0) and not myContribution.id
          scope.model.inputStatus = "ready"
          return

        scope.model.inputStatus = "saving"
        scope.saveContribution(myContribution).then ->
          if myContribution.amount.eq(0)
            scope.model.inputStatus = "ready"
          else
            scope.model.inputStatus = "saved"
        , (err) ->
          scope.model.inputStatus = "error"
          # TODO handle error

  if bucket.myContribution.amount > 0 or scope.model.readonly
    scope.model.inputStatus = 'saved'
  else
    scope.model.inputStatus = "ready"

  scope.$watch "model.myContributionAmount", (amount, oldAmount) ->
    if amount != oldAmount
      element.find('input[type="number"]').focus()
