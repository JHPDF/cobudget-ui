var AmpView = require('ampersand-view');
var $ = require('jquery');

var currentModal = null;

module.exports = AmpView.extend({

  el: $('main > .modal'),

  template: require('./modal-template.html'),

  props: {
    title: 'string',
    isError: 'boolean',
    submitText: ['string', true, 'Submit'],
    cancelText: ['string', true, 'Cancel'],
    closeText: ['string', true, 'Close'],
    showClose: ['boolean', true, true],
    showButtons: ['boolean', true, true],
    showSubmit: ['boolean', true, true],
    showCancel: ['boolean', true, false],
  },

  bindings: {
    'model.title': '[data-hook="title"]',
    'model.submitText': '[data-hook="submit"]',
    'model.cancelText': '[data-hook="cancel"]',
    'model.closeText': '[data-hook="closeText"]',
    'model.showClose': {
      type: 'toggle',
      selector: '[data-hook="close"]',
    },
    'model.isError': {
      type: 'booleanClass',
      yes: 'btn-danger',
      no: 'btn-primary',
      selector: '[data-hook="submit"]',
    },
    'model.showButtons': {
      type: 'toggle',
      selector: '[data-hook="buttons"]',
    },
    'model.showSubmit': {
      type: 'toggle',
      selector: '[data-hook="submit"]',
    },
    'model.showCancel': {
      type: 'toggle',
      selector: '[data-hook="cancel"]',
    },
  },

  events: {
    'click [data-hook="submit"]': 'submitClicked',
  },

  initialize: function (options) {
    AmpView.prototype.initialize.apply(this, arguments);

    // there can only be ONE modal!
    if (currentModal) {
      currentModal.dismiss();
    }
    currentModal = this;

    // set callback
    this._callback = options.callback;

    // set content view
    this._BodyView = options.BodyView;
  },

  render: function () {
    this.renderWithTemplate(this);
    this.show();
    return this;
  },

  subviews: {
    body: {
      hook: 'body',
      prepareView: function (el) {
        return new this._BodyView({
          el: el,
          parent: this,
        });
      },
    },
  },

  submitClicked: function () {
    this.close(true);
  },

  hide: function (callback) {
    $(this.el).modal('hide');
    if (callback) {
      $(this.el).on("hidden.bs.modal", callback)
    }
  },

  show: function (callback) {
    $(this.el).modal('show');
    if (callback) {
      $(this.el).on("shown.bs.modal", callback)
    }
  },

  animateRemove: function (callback) {
    this.hide(function (ev) {
      this.remove();
      callback(ev);
    }.bind(this))
  },

  cancel: function (err, callback) {
    this.animateRemove(callback);
    this._callback(err);
  },

  close: function (result, callback) {
    this.animateRemove(callback);
    this._callback(null, result);
  },
});
